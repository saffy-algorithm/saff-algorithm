# 디저트 카페 투어
# 대각선 방향으로 움직이고
# 사각형 모양을 그리며 출발한 카페로 돌아와야함
# 투어 도중 해당 지역을 벗어나면 안됨
# 카페 투어 중에 같은 숫자의 디저트를 팔고 있는 카페가 있으면 안됨
# 하나의 카페에서 디저트 섭취 안됨 -> 무조건 이동
# 왔던 길 되돌아가기 안됨

# 디저트를 가장 많이 먹을 수 있는 경로 찾고
# 디저트 수를 정답으로 출력
# 디저트 못 먹으면 -1 출력

# 중복되지 않는 거, 포함되는 거, 
# 가능한 모든 경우 중(전체 순회)에서 가장 큰 값

# 시작점 sr sc -> 마름모로 순회
# visited에 저장하고(중복체크) 어펜드 그 길이가 -> 출력값
# 직진 -> 꺾기 3번 -> 종료 조건이 3이되면 ??
# 마름모는 최대 3번 방향 변경 가능하고 다시 내자리로 돌아와
# 정지 왜 필요한가 ?

dr = [1, 1, -1, -1]
dc = [1, -1, -1, 1]

def dfs()
    # 꺾기 3번을 하면 종료

    



T = int(input())
for tc in range(1, T+1):
    N = int(input())        # N : 지역의 한 변의 길이
    arr = [list(map(int,input().split())) for _ in range(N)]  # 디저트 종류 2차원 리스트
    answer = 

    



